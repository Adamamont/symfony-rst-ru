:orphan:

Словарь терминов
=================

.. glossary::
   :sorted:

   Distribution
        *Distribution* (Дистрибутив) - это готовый комплект компонентов Symfony2, набора Пакетов
        (бандлов), с осмысленной структурой каталогов, конфигурацей по умолчанию
        и дополнительной системой конфигурации.

   Project
        *Project* (Проект) - это директория, состоящая из Приложения, набора Пакетов (бандлов),
        сторонних библиотек, автозагрузчика и web скриптов фронт-контроллера.

   Application
        *Application* (Приложение) - это папка, содержащая *конфигурацию* для данного
        набора Пакетов (бандлов).

   Bundle
        *Bundle* (Пакет) - это структурированный набор файлов (PHP файлов, таблиц стилей,
        JavaScript-ов, картинок и т. д.), *представляющий* одну функциональность
        (блог, форум и т. д.) и который легко может быть использован другими
        разработчиками. (см. :ref:`page-creation-bundles`)

   Front Controller
        *Front Controller* (Внешний контроллер) это короткий PHP код, который располагается в web
        директории вашего проекта. Обычно, *все* запросы обрабатываются
        посредством запуска одного и того же фронт контроллера, чья работа
        заключается в начальной загрузке приложения Symfony2.

   Controller
        *Controller* (Контроллер) это PHP функция содержащая в себе всю логику необходимую
        для формирования объекта ``Response``, представляющего конкретную страницу.
        Как правило, маршрут передаёт управление контроллеру, который использует
        информацию из запроса, чтобы её обработать, выполнить необходимые действия
        и в конечном итоге построить и вернуть объект ``Response``.

   Service
        *Service* (Сервис/Служба) общее обозначение для любого объекта PHP, который выполняет
        определенную задачу. Службы обычно используются "глобально", например как
        объект соединения с базой данных или объект отправки электронных писем.
        В Symfony2, зачастую службы сконфигурированны и полученны внутри контейнера
        служб(service container). Про приложение, которое имеет много различных служб,
        говорят, что оно соответствует `сервис-ориентированной архитектуре`_.

   Service Container
        *Service Container* (Контейнер Служб), также известнный как *Dependency Injection Container*,
        специальный объект управляющий экземплярами служб внутри приложения.
        Вместо того, чтобы создавать службы непосредственно, разработчик
        *обучает* контейнер служб (через конфигурацию), как создавать службы.
        Контейнер служб заботится о отложенной(ленивой) загрузке и внедрению
        зависимых служб. См. :doc:`/book/service_container` chapter.

   HTTP Specification
        *Http Specification* (Спецификация HTTP) документ, который описывает Hypertext Transfer Protocol 
        (протокол передачи гипертекста) - набор правил, излагающих классическую
        клиент-серверную коммуникацию - запрос-ответ. Спецификация определяет формат,
        используемый для запроса и ответа, а также возможные заголовки HTTP. Для 
        получения дополнительной информации ознакомьтесь со статьёй `Википедии`_
        или `HTTP 1.1 RFC`_.

   Environment
        *Environment* (Окружение) это строка (например ``prod`` или ``dev``), соответствующую
        определенному набору конфигурации. Любое приложение может быть запущено
        одной и тойже машине в разных конфигурациях, при запуске в разных окружениях.
        Это полезно, так как позволяет одному приложению иметь окружение ``dev`` для
        отладки и окружение ``prod`` оптимизированное для быстрой работы.

   Vendor
        *Vendor* (Поставщик) содержит PHP библиотеки и пакеты включённые в поставку Symfony2.
        Несмотря на свой коммерческий подтекст этого слова, в Symfony поставщики 
        зачастую (скорее обычно) содержат бесплатное программное обеспечение.
        Любая библиотека, которую Вы добавляете к своему проекту Symfony2, должна
        находится в директории ``vendor``. Для получения дополнительной информации
        смотри :ref:`Архитектура: Использование поставщиков <using-vendors>`.

   Acme
        *Acme* типовое название компании, используемое в демонстрации и документации
        Symfony. Оно используется как пространство имён, вместо которого вы можете
        подставить название своей компании/организации/шайки(например ``Acme\BlogBundle``).

   Action
        *Action* (Действие) функция или метод PHP который выполняется, например, при соответствии
        вызова с заданным маршрутом. Терм действия синонимичен с *controller*,
        хотя контроллер может также относиться ко всему классу PHP, который включает
        ряд действий. Для получения дополнительной информации смотри :doc:`Controller Chapter </book/controller>`.

   Asset
        *Aasset* (Актив/Ресурс) это любой не исполняемый, статический компонент веб-приложения,
        включая CSS, JavaScript, изображения и видео. могут быть помещены
        непосредственно в каталог ``web`` вашего проекта, или опубликованны из :term:`Bundle`
        в каталог web исполнив консольную команду ``assets:install``.

   Kernel
        *Kernel* (Ядро) это основа Symfony2. Объект ядра оперирует с HTTP запросами
        используея все зарегистрированые в нём пакеты и библиотеки. Смотри главы
        :ref:`The Architecture: The Application Directory <the-app-dir>` и
        :doc:`/book/internals/kernel`.

   Firewall
        В Symfony2, *Firewall* (Файрвол) не имеет отношения к сети. Вместо этого,
        он описывает механизмы аутентификации (то есть он управляет процессом
        определения личности Ваших пользователей), для всего приложения или
        только части.. Для получения дополнительной информации смотри главу :doc:`/book/security`.

   YAML
        *YAML* рекурсивный акроним YAML Ain't Markup Language ("YAML — не язык разметки").
        Это легкий, гуманный язык сериализации данных широко используется в файлах
        конфигурации Symfony2. Смотри главу :doc:`/reference/YAML`.




.. _`сервис-ориентированной архитектуре`: http://ru.wikipedia.org/wiki/%D0%A1%D0%B5%D1%80%D0%B2%D0%B8%D1%81-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%B0%D1%8F_%D0%B0%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D1%83%D1%80%D0%B0
.. _`HTTP Wikipedia`: http://ru.wikipedia.org/wiki/HTTP
.. _`HTTP 1.1 RFC`: http://www.w3.org/Protocols/rfc2616/rfc2616.html
